{"version":3,"sources":["functions/fetch.js","views/MainPage.js","views/IssuePage.js","views/App.js","serviceWorker.js","index.js"],"names":["getPageIssue","setData","page","perPage","fetch","BASE_URL","then","response","json","data","catch","error","console","log","MainPage","props","useState","setPage","size","setSize","useEffect","length","className","Pagination","Prev","onClick","e","preventDefault","setPrevPage","items","i","push","Item","key","active","getPageItems","Next","setNextPage","map","info","idx","Card","number","Body","style","marginRight","to","title","Button","state","IssuePage","issueIdx","useParams","id","user","dateStr","Object","keys","getIssue","padding","display","flexDirection","flexWrap","fontSize","avatar_url","src","alt","width","height","borderRadius","body","login","url","created_at","color","Date","parse","toLocaleString","App","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gTAWaA,EAAe,SAACC,EAASC,EAAMC,GAC1CC,MAAM,GAAD,OAAIC,EAAJ,iBAAqBH,EAArB,qBAAsCC,IACxCG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAQQ,MAETC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OCyEjBG,EAlFE,SAAAC,GAAU,IAAD,EACAC,mBAAS,IADT,mBACjBP,EADiB,KACXR,EADW,OAEAe,mBAAS,GAFT,mBAEjBd,EAFiB,KAEXe,EAFW,OAGAD,mBAAS,GAHT,mBAGjBE,EAHiB,KAGXC,EAHW,KAKxBP,QAAQC,IAAIX,GACZU,QAAQC,IAAIJ,GAwCZ,OANAW,qBAAU,WACY,IAAhBX,EAAKY,QACPrB,EAAaC,EAASC,EAtCT,MAwCd,CAACO,EAAMP,IAGR,yBAAKoB,UAAU,OACb,4BAAQA,UAAU,cAChB,oDACA,kBAACC,EAAA,EAAD,CAAYL,KAAK,MACf,kBAACK,EAAA,EAAWC,KAAZ,CAAiBC,QAAS,SAACC,GAAD,OA/Bd,SAACA,GACnBA,EAAEC,iBACEzB,EAAO,EAAIgB,EAAO,GACpBC,EAAQD,EAAO,GAEbhB,EAAO,IACTe,EAAQf,EAAO,GACfF,EAAaC,EAASC,EAAO,EAvBhB,KA+CsB0B,CAAYF,MA3C9B,SAACxB,GAEpB,IADA,IAAI2B,EAAQ,GACHC,EAAI,EAAGA,GAAKZ,EAAMY,IACzBD,EAAME,KACJ,kBAACR,EAAA,EAAWS,KAAZ,CAAiBC,IAAG,eAAUH,GAAKI,OAAQhC,IAAS4B,GACjDA,IAIP,OAAOD,EAmCAM,CAAajC,GACd,kBAACqB,EAAA,EAAWa,KAAZ,CAAiBX,QAAS,SAACC,GAAD,OAtBd,SAACA,GACnBA,EAAEC,iBACEzB,EAAO,EAAIgB,GACbC,EAAQD,EAAO,GAEjBD,EAAQf,EAAO,GACfF,EAAaC,EAASC,EAAO,EAjCd,IAiDsBmC,CAAYX,OAG3CjB,GAAQA,EAAK6B,KAAI,SAACC,EAAMC,GACtB,OACE,kBAACC,EAAA,EAAD,CAAMR,IAAG,gBAAWM,EAAKG,SACvB,kBAACD,EAAA,EAAKE,KAAN,KACE,4BACE,0BAAMC,MAAO,CAAEC,YAAa,SAA5B,IACIN,EAAKG,QAET,kBAAC,IAAD,CACEI,GAAE,iBAAYN,EAAI,GAClBI,MAAO,CAAEC,YAAa,SAErBN,EAAKQ,OAER,kBAACC,EAAA,EAAD,KAAST,EAAKU,gBCRnBC,EAjEG,SAAAnC,GAAU,IAAD,EACDC,mBAAS,IADR,mBAClBP,EADkB,KACZR,EADY,KAEnBkD,EAAWC,cAAYC,GAC7BzC,QAAQC,IAAIJ,GACZG,QAAQC,IAAIJ,EAAK6C,MAEjB,IAAiBC,EAWjB,OANAnC,qBAAU,WACyB,IAA7BoC,OAAOC,KAAKhD,GAAMY,QFGF,SAACpB,EAASkD,GAChC/C,MAAM,GAAD,OAAIC,EAAJ,YAAgB8C,IAClB7C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAQQ,MAETC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MER1B+C,CAASzD,EAASkD,KAEnB,CAAC1C,EAAM0C,IAGR,kBAACV,EAAA,EAAD,CAAMG,MAAO,CAAEe,QAAS,SAEpBlD,GACA,oCACE,yBAAKmC,MAAO,CAAEgB,QAAS,OAAQC,cAAe,MAAOC,SAAU,SAC7D,yBAAKlB,MAAO,CAAEmB,SAAU,OAAQlB,YAAa,SAC1CpC,EAAKsC,OAGNtC,EAAK6C,MAAQ7C,EAAK6C,KAAKU,YACvB,yBACEC,IAAKxD,EAAK6C,KAAKU,WACfE,IAAI,cACJC,MAAM,KACNC,OAAO,KACPxB,MAAO,CAAEyB,aAAc,UAI7B,6BACG5D,EAAK6D,MAER,yBAAK1B,MAAO,CAAEgB,QAAS,OAAQC,cAAe,QAE1CpD,EAAK6C,MAAQ7C,EAAK6C,KAAKiB,OACvB,oCACE,uBAAG3B,MAAO,CAAEC,YAAa,WAAzB,MAGA,kBAAC,IAAD,CAAMC,GAAIrC,EAAK6C,KAAKkB,IAAK5B,MAAO,CAAEC,YAAa,SAC5CpC,EAAK6C,KAAKiB,QAKf9D,EAAKgE,YACL,yBAAK7B,MAAO,CAAE8B,MAAO,UAhDhBnB,EAiDM9C,EAAKgE,WAhDb,IAAIE,KAAKA,KAAKC,MAAMrB,IACrBsB,uBCPHxE,EAAW,yDAgBTyE,MAdf,WACE,OACE,yBAAKxD,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyD,OAAK,EAACC,KAAK,QAAQC,UAAWnE,IACrC,kBAAC,IAAD,CAAOiE,OAAK,EAACC,KAAK,aAAaC,UAAW/B,IAC1C,kBAAC,IAAD,CAAO8B,KAAK,IAAIE,OAAQ,kBAAM,kBAAC,IAAD,CAAUpC,GAAG,iBCHjCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAAAyF,GACJA,EAAaC,gBAEdtF,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsF,c","file":"static/js/main.ae6071c8.chunk.js","sourcesContent":["import { BASE_URL } from \"../views/App\"\n\nexport const getAllIssues = (setData) => {\n  fetch(BASE_URL)\n    .then(response => response.json())\n    .then(data => {\n      setData(data)\n    })\n    .catch(error => console.log(error))\n}\n\nexport const getPageIssue = (setData, page, perPage) => {\n  fetch(`${BASE_URL}?page=${page}&per_page=${perPage}`)\n    .then(response => response.json())\n    .then(data => {\n      setData(data)\n    })\n    .catch(error => console.log(error))\n}\n\nexport const getIssue = (setData, issueIdx) => {\n  fetch(`${BASE_URL}/${issueIdx}`)\n    .then(response => response.json())\n    .then(data => {\n      setData(data)\n    })\n    .catch(error => console.log(error))\n}\n","import React, { useEffect, useState } from \"react\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { Button, Card, Pagination } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\nimport { getPageIssue } from \"../functions/fetch\"\n\n// docs https://docs.github.com/en/free-pro-team@latest/rest/reference/issues\n\nconst MainPage = props => {\n  const [data, setData] = useState([])\n  const [page, setPage] = useState(1)\n  const [size, setSize] = useState(5)\n  const PER_PAGE = 10\n  console.log(page)\n  console.log(data)\n\n  const getPageItems = (page) => {\n    let items = []\n    for (let i = 1; i <= size; i++) {\n      items.push(\n        <Pagination.Item key={`page-${i}`} active={page === i}>\n          {i}\n        </Pagination.Item>\n      )\n    }\n    return items\n  }\n\n  const setPrevPage = (e) => {\n    e.preventDefault()\n    if (page - 1 < size - 5) {\n      setSize(size - 5)\n    }\n    if (page > 1) {\n      setPage(page - 1)\n      getPageIssue(setData, page - 1, PER_PAGE)\n    }\n  }\n\n  const setNextPage = (e) => {\n    e.preventDefault()\n    if (page + 1 > size) {\n      setSize(size + 5)\n    }\n    setPage(page + 1)\n    getPageIssue(setData, page + 1, PER_PAGE)\n  }\n\n  useEffect(() => {\n    if (data.length === 0) {\n      getPageIssue(setData, page, PER_PAGE)\n    }\n  }, [data, page])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Github Issue Browser</h1>\n        <Pagination size=\"md\">\n          <Pagination.Prev onClick={(e)=>setPrevPage(e)}/>\n          {getPageItems(page)}\n          <Pagination.Next onClick={(e)=>setNextPage(e)}/>\n        </Pagination>\n        {\n          data && data.map((info, idx) => {\n            return (\n              <Card key={`issue-${info.number}`}>\n                <Card.Body>\n                  <h2>\n                    <span style={{ marginRight: \"1rem\" }}>\n                      #{info.number}\n                    </span>\n                    <Link\n                      to={`/issue/${idx+1}`}\n                      style={{ marginRight: \"1rem\" }}\n                    >\n                      {info.title}\n                    </Link>\n                    <Button>{info.state}</Button>\n                  </h2>\n                </Card.Body>\n              </Card>\n            )\n          })\n        }\n      </header>\n    </div>\n  )\n}\n\nexport default MainPage\n","import React, { useEffect, useState } from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport { Link, useParams } from \"react-router-dom\"\nimport { getIssue } from \"../functions/fetch\"\n\nconst IssuePage = props => {\n  const [data, setData] = useState({})\n  const issueIdx = useParams().id\n  console.log(data)\n  console.log(data.user)\n\n  const getDate = (dateStr) => {\n    const date = new Date(Date.parse(dateStr))\n    return date.toLocaleString()\n  }\n\n  useEffect(() => {\n    if (Object.keys(data).length === 0) {\n      getIssue(setData, issueIdx)\n    }\n  }, [data, issueIdx])\n\n  return (\n    <Card style={{ padding: \"2rem\" }}>\n      {\n        data &&\n        <>\n          <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\n            <div style={{ fontSize: \"2rem\", marginRight: \"2rem\" }}>\n              {data.title}\n            </div>\n            {\n              data.user && data.user.avatar_url &&\n              <img\n                src={data.user.avatar_url}\n                alt=\"user avatar\"\n                width=\"40\"\n                height=\"40\"\n                style={{ borderRadius: \"50%\" }}\n              />\n            }\n          </div>\n          <div>\n            {data.body}\n          </div>\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            {\n              data.user && data.user.login &&\n              <>\n                <p style={{ marginRight: \"0.5rem\" }}>\n                  By\n                </p>\n                <Link to={data.user.url} style={{ marginRight: \"1rem\" }}>\n                  {data.user.login}\n                </Link>\n              </>\n            }\n            {\n              data.created_at &&\n              <div style={{ color: \"gray\" }}>\n                {getDate(data.created_at)}\n              </div>\n            }\n          </div>\n        </>\n      }  \n    </Card>\n  )\n}\n\nexport default IssuePage\n","import React from \"react\"\nimport \"../App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\"\nimport MainPage from \"./MainPage\"\nimport IssuePage from \"./IssuePage\"\nexport const BASE_URL = \"https://api.github.com/repos/walmartlabs/thorax/issues\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/main\" component={MainPage} />\n          <Route exact path=\"/issue/:id\" component={IssuePage} />\n          <Route path=\"*\" render={() => <Redirect to=\"/main\" />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}